/* Copyright (C) 2008 The cluttermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cluttermm.h>
#include <cluttermm/childmeta.h>
#include <clutter-box2d.h>
#include <clutter-box2d-child.h>
#include <clutter-box2d-collision.h>
 
_DEFS(clutter-box2dmm,clutter-box2d)
_PINCLUDE(cluttermm/private/group_p.h)
_PINCLUDE(cluttermm/private/childmeta_p.h)

namespace Clutter
{

namespace Box2D
{

_WRAP_ENUM(Type, ClutterBox2DType, NO_GTYPE)

class Box2DCollision:
  public Glib::Object
{
  _CLASS_GOBJECT(Box2DCollision, ClutterBox2DCollision, CLUTTER_BOX2D_COLLISION, Glib::Object, GObject)

protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  Glib::RefPtr<Clutter::Actor> get_actor1();
  Glib::RefPtr<Clutter::Actor> get_actor2();
};

class Box2DChild :
  public Clutter::ChildMeta
{
  _CLASS_GOBJECT(Box2DChild, ClutterBox2DChild, CLUTTER_BOX2D_CHILD, Clutter::ChildMeta, ClutterChildMeta)

protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE()
  _WRAP_SIGNAL(void collision(const Glib::RefPtr<Clutter::Box2D::Box2DCollision> & c), "collision", no_default_handler)
};


/** This is a container that can physically simulate collisions between dynamic and static actors.
 * Use set_child_property() on the child actors.
 */
class Box2D :
  public Clutter::Group
{
  _CLASS_GOBJECT(Box2D, ClutterBox2D, CLUTTER_BOX2D, Clutter::Group, ClutterGroup)

protected:
  _CTOR_DEFAULT
  _IGNORE(clutter_box2d_new)

public:
  _WRAP_CREATE()

// The clutter_box2d_get_child method is in 
// #include "clutter-box2d-private.h"
// and, therefore, cannot be wrapped.
//  _WRAP_METHOD(const Glib::RefPtr<Clutter::Box2D::Box2DChild>& get_child(const Glib::RefPtr<Clutter::Actor>& actor), clutter_box2d_get_child)

  _WRAP_METHOD(void set_simulating(gboolean simulating = true), clutter_box2d_set_simulating)
  // TODO: similar compile problem to below  _WRAP_METHOD(gboolean get_simulating() const, clutter_box2d_get_simulating)

  //TODO: Wrap ClutterBox2DJoint properly - ideally it would be a registered type, with hidden implementation.

/* TODO: re-add these when the m4 macros are fixed to generate code that compiles
  _WRAP_METHOD(ClutterBox2DJoint* add_revolute_joint(const Glib::RefPtr<Clutter::Actor>& actor1, const Glib::RefPtr<Clutter::Actor>& actor2, const Clutter::Vertex& anchor1, const Clutter::Vertex& anchor2, double reference_angle), clutter_box2d_add_revolute_joint)


  _WRAP_METHOD(ClutterBox2DJoint* add_revolute_joint(const Glib::RefPtr<Clutter::Actor>& actor1, const Glib::RefPtr<Clutter::Actor>& actor2, const Clutter::Vertex& anchor), clutter_box2d_add_revolute_joint2)


  _WRAP_METHOD(ClutterBox2DJoint* add_distance_joint(const Glib::RefPtr<Clutter::Actor>& actor1,
                                                     const Glib::RefPtr<Clutter::Actor>& actor2,
                                                     const Clutter::Vertex& anchor1,
                                                     const Clutter::Vertex& anchor2,
                                                     double length, double frequency = 0.0, double damping_ratio = 0.0), clutter_box2d_add_distance_joint)


  _WRAP_METHOD(ClutterBox2DJoint* add_prismatic_joint(const Glib::RefPtr<Clutter::Actor>& actor1,
                                                      const Glib::RefPtr<Clutter::Actor>& actor2,
                                                      const ClutterVertex *anchor1,
                                                      const ClutterVertex *anchor2,
                                                      double min_length, double max_length,  const Clutter::Vertex& axis), clutter_box2d_add_prismatic_joint)


//TODO: Remove this conversion when the C API has been fixed. See http://bugzilla.o-hand.com/show_bug.cgi?id=1095
#m4 _CONVERSION(`const Clutter::Vertex&', `ClutterVertex*', `const_cast<Clutter::Vertex&>($3).gobj()')
  _WRAP_METHOD(ClutterBox2DJoint* add_mouse_joint(const Glib::RefPtr<Clutter::Actor>& actor, const Clutter::Vertex& target), clutter_box2d_add_mouse_joint)
*/

  void set_child_linear_velocity(const Glib::RefPtr<Clutter::Actor>& actor, const Clutter::Vertex& linear_velocity);
  Clutter::Vertex get_child_linear_velocity(const Glib::RefPtr<const Clutter::Actor>& actor) const;

  void set_child_angular_velocity(const Glib::RefPtr<Clutter::Actor>& actor, const Clutter::Vertex& angular_velocity);
  Clutter::Vertex get_child_angular_velocity(const Glib::RefPtr<const Clutter::Actor>& actor) const;

  void set_child_is_bullet(const Glib::RefPtr<Clutter::Actor>& actor, bool is_bullet = true);
  bool get_child_is_bullet(const Glib::RefPtr<const Clutter::Actor>& actor) const;

  void set_child_mode(const Glib::RefPtr<Clutter::Actor>& actor, Type mode);
  Type get_child_mode(const Glib::RefPtr<const Clutter::Actor>& actor) const;

  void set_child_manipulatable(const Glib::RefPtr<Clutter::Actor>& actor, bool manipulatable = true);
  bool get_child_manipulatable(const Glib::RefPtr<const Clutter::Actor>& actor) const;

  _WRAP_PROPERTY("gravity", Clutter::Vertex)
  _WRAP_PROPERTY("simulating", bool)
};

} // namespace Box2D

} // namespace Clutter

//vim: ts=2,sw=2
